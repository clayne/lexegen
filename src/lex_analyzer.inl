// Lexegen autogenerated analyzer file - do not edit!

static int symb2meta[256] = {
    0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 4, 5, 1, 6, 1,
    1, 7, 7, 7, 7, 1, 8, 9, 7, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 1, 1, 12, 1, 13, 7, 1, 14, 14, 14, 14, 15, 16,
    17, 17, 17, 17, 17, 17, 17, 17, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 19, 20, 21, 22, 17, 1, 23, 24, 14,
    14, 14, 25, 17, 17, 26, 17, 17, 17, 17, 27, 28, 29, 17, 30, 31, 32, 17, 33, 17, 34, 17, 17, 35, 7, 36, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1
};

static int def[70] = {
    -1, -1, 0, 1, 0, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, 13, -1, 34, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 15, -1, -1, 1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
};

static int base[70] = {
    0, 37, 73, 109, 143, 63, 77, 77, 75, 80, 80, 80, 80, 176, 58, 210, 233, 144, 112, 112, 102, 129, 129, 129, 129, 129,
    129, 129, 258, 274, 129, 119, 147, 147, 135, 135, 185, 141, 153, 135, 140, 149, 150, 164, 154, 181, 181, 292, 181,
    181, 181, 169, 276, 182, 182, 182, 247, 291, 182, 153, 151, 161, 155, 154, 189, 157, 171, 185, 225, 254
};

static int next[329] = {
    6, 11, 8, 54, 10, 55, 56, 11, 11, 11, 44, 44, 11, 11, 57, 57, 57, 57, 57, 11, 11, 11, 11, 57, 57, 57, 57, 57, 57,
    57, 57, 57, 57, 57, 57, 11, 11, 46, 52, 52, 46, 53, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 49,
    52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 7, 13, 9, 8, 7, 7, 33, 7, 12, 7, 7, 51, 7, 7, 7, 7,
    7, 7, 14, 15, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 16, 7, 47, 47, 31, 47, 47, 47, 47, 48, 47, 47, 47, 47, 47,
    47, 47, 47, 47, 47, 47, 32, 50, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 9, -1, 11, 11, 39, -1,
    -1, 40, 17, 17, 41, 11, 11, 11, 11, 11, 42, 43, 44, 44, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 34, 45, 18,
    35, 65, 61, 62, 63, 64, 37, 35, 66, 36, 36, 36, 36, 36, 36, 36, 67, 38, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
    36, 19, 19, 68, 19, 19, 19, 19, 19, 19, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 21, 22, 23, 19, 24, 19,
    19, 25, 19, 26, 27, 28, 19, 19, 17, 17, 17, 17, 17, 69, 58, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    29, 29, -1, -1, 29, 29, 29, 59, -1, -1, 60, -1, -1, 29, 29, 29, 30, 30, -1, -1, 30, 30, 30, -1, -1, -1, -1, -1, -1,
    30, 30, 30, -1, 57, 57, -1, -1, 57, 57, 57, 57, 57, -1, 47, -1, -1, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
    47, 47, 47
};

static int check[329] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 5, 2, 8,
    2, 2, 14, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 20, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 31, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 34, 4, 4, 35, 37, 37,
    39, 17, 17, 40, 4, 4, 4, 4, 4, 41, 42, 44, 44, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 13, 4, 17, 51, 59, 60, 61, 62,
    63, 36, 13, 65, 13, 13, 13, 13, 13, 36, 36, 66, 36, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 15, 15, 67, 15,
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 16, 16, 16, 16, 16, 68, 56, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 28, 28, 28, 28, 28,
    28, 28, 56, 52, 28, 56, 52, 52, 28, 28, 28, 29, 29, 28, 28, 29, 29, 29, 28, 47, 28, 28, 47, 52, 29, 29, 29, 47, 57,
    57, 29, 29, 57, 57, 57, 57, 57, 29, 47, 47, 47, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 47, 47, 47
};

static int accept[70] = {
    0, 0, 0, 0, 0, 0, 149, 105, 68, 97, 137, 141, 81, 104, 72, 104, 92, 0, 89, 45, 8, 17, 21, 25, 33, 29, 37, 41, 44,
    12, 13, 8, 9, 77, 0, 0, 0, 0, 7, 0, 0, 0, 0, 85, 128, 101, 109, 56, 61, 140, 65, 104, 48, 53, 145, 133, 140, 124,
    121, 0, 0, 0, 0, 0, 113, 0, 0, 0, 0, 117
};

static int lls_idx[71] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
};

static int lls_list[1] = {
    1
};

int lex(StateData& data, int state) {
    enum { kDeadFlag = 1, kTrailContFlag = 2, kFlagCount = 2 };
    if (data.state_stack.empty()) { data.pat_length = 0; }

    // Fill buffers till transition is impossible
    char symb = '\0';
    do {
        if (data.unread_text == data.text.data() + data.text.size()) { return -1; }
        symb = *data.unread_text;
        int meta = symb2meta[static_cast<unsigned char>(symb)];
        if (meta < 0) { break; }
        do {
            int l = base[state] + meta;
            if (check[l] == state) {
                state = next[l];
                break;
            }
            state = def[state];
        } while (state >= 0);
        if (state < 0) { break; }
        data.text[data.pat_length++] = symb;
        ++data.unread_text;
        data.state_stack.push_back(state);
    } while (symb != 0 && !(accept[state] & kDeadFlag));

    // Unroll downto last accepting state
    while (!data.state_stack.empty()) {
        int n_pat = accept[data.state_stack.back()];
        if (n_pat > 0) {
            bool has_trailling_context = n_pat & kTrailContFlag;
            n_pat >>= kFlagCount;
            if (has_trailling_context) {
                do {
                    state = data.state_stack.back();
                    for (int i = lls_idx[state]; i < lls_idx[state + 1]; ++i) {
                        if (lls_list[i] == n_pat) {
                            data.state_stack.clear();
                            return n_pat;
                        }
                    }
                    *(--data.unread_text) = data.text[--data.pat_length];
                    data.state_stack.pop_back();
                } while (!data.state_stack.empty());
            }
            data.state_stack.clear();
            return n_pat;
        }
        *(--data.unread_text) = data.text[--data.pat_length];
        data.state_stack.pop_back();
    }

    // Default pattern
    data.text[data.pat_length++] = *data.unread_text++;
    return predef_pat_default;
}

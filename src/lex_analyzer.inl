// Lexegen autogenerated analyzer file - do not edit!

static int symb2meta[256] = {
    -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 0, 5,
    0, 0, 6, 6, 6, 6, 0, 7, 8, 6, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 0, 0, 11, 0, 12, 6, 0, 13, 13, 13, 13, 14, 15, 16, 16,
    16, 16, 16, 16, 16, 16, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 19, 20, 21, 16, 0, 22, 23, 13, 13, 13,
    24, 16, 16, 25, 16, 16, 16, 16, 26, 27, 28, 16, 29, 30, 31, 16, 32, 16, 33, 16, 16, 34, 6, 35, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0
};

static int def[68] = {
    -1, 0, 0, 1, 0, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, 12, -1, 33, 35, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, 14, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1
};

static int base[68] = {
    0, 36, 72, 108, 142, 27, 73, 72, 75, 75, 75, 75, 175, 54, 209, 232, 143, 78, 78, 69, 110, 110, 110, 110, 110, 110,
    110, 257, 273, 110, 101, 127, 127, 116, 131, 184, 139, 150, 133, 136, 142, 148, 161, 152, 163, 271, 163, 163, 163,
    163, 152, 249, 179, 179, 271, 290, 179, 151, 149, 159, 153, 152, 184, 153, 162, 168, 185, 250
};

static int next[326] = {
    10, 7, 46, 9, 53, 54, 10, 10, 10, 43, 43, 10, 10, 55, 55, 55, 55, 55, 10, 10, 10, 10, 55, 55, 55, 55, 55, 55, 55,
    55, 55, 55, 55, 55, 10, 10, 51, 51, 12, 52, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 48, 51, 51,
    51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 6, 7, 8, 32, 6, 6, 30, 6, 11, 6, 6, 50, 6, 6, 6, 6, 6, 6,
    13, 14, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 15, 6, 45, 45, 31, 45, 45, 45, 45, 47, 45, 45, 45, 45, 45, 45, 45,
    45, 45, 45, 45, -1, 49, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 8, 38, 10, 10, -1, -1, 39, 40,
    16, 16, 41, 10, 10, 10, 10, 10, 42, 43, 43, 34, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 33, 44, 17, 63, 59,
    60, 61, 62, 64, 36, 34, 65, 35, 35, 35, 35, 35, 35, 35, 66, 37, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 18,
    18, 67, 18, 18, 18, 18, 18, 18, 19, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 20, 21, 22, 18, 23, 18, 18, 24,
    18, 25, 26, 27, 18, 18, 16, 16, 16, 16, 16, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 28, 28,
    -1, -1, 28, 28, 28, -1, -1, -1, 56, -1, -1, 28, 28, 28, 29, 29, -1, -1, 29, 29, 29, -1, -1, -1, -1, -1, -1, 29, 29,
    29, 57, 55, 55, 58, -1, 55, 55, 55, 55, 55, -1, -1, -1, -1, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, -1, -1
};

static int check[326] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 5,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 7, 2, 13, 2,
    2, 19, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 30, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 33, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 34, 4, 4, 36, 36, 38, 39,
    16, 16, 40, 4, 4, 4, 4, 4, 41, 43, 43, 50, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 12, 4, 16, 57, 58, 59, 60, 61, 63,
    35, 12, 64, 12, 12, 12, 12, 12, 35, 35, 65, 35, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 66, 14, 14,
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
    14, 14, 15, 15, 15, 15, 15, 15, 51, 51, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 27, 27, 51, 27, 27, 27,
    27, 45, 27, 27, 54, 27, 45, 27, 27, 27, 28, 28, 27, 27, 28, 28, 28, 27, 45, 45, 27, 28, 28, 28, 28, 28, 54, 55, 55,
    54, 28, 55, 55, 55, 55, 55, 28, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55
};

static int accept[68] = {
    0, 0, 0, 0, 0, 0, 52, 34, 48, 66, 68, 40, 52, 36, 52, 46, 0, 44, 22, 4, 8, 10, 12, 16, 14, 18, 20, 22, 6, 6, 4, 4,
    38, 0, 0, 0, 0, 3, 0, 0, 0, 0, 42, 62, 50, 28, 70, 30, 68, 32, 52, 24, 26, 64, 68, 60, 58, 0, 0, 0, 0, 0, 54, 0, 0,
    0, 0, 56
};

static int lls_idx[69] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
};

static int lls_list[1] = {
    1
};

static int lex(CtxData& ctx, std::vector<int>& state_stack) {
    enum { kTrailContFlag = 1, kFlagCount = 1 };
    char symb = '\0';
    int state = state_stack.back();
    do {  // Fill buffers till transition is impossible
        if (ctx.in_next == ctx.in_boundary) {
            if (ctx.in_next == ctx.in_last) { break; }
            return err_end_of_input;
        }
        symb = *ctx.in_next;
        int meta = symb2meta[static_cast<unsigned char>(symb)];
        if (meta < 0) { break; }
        do {
            int l = base[state] + meta;
            if (check[l] == state) {
                state = next[l];
                break;
            }
            state = def[state];
        } while (state >= 0);
        if (state < 0) { break; }
        ++ctx.in_next, *ctx.out_last++ = symb;
        state_stack.push_back(state);
    } while (symb != 0);
    while (ctx.out_last != ctx.out_first) {  // Unroll downto last accepting state
        int n_pat = accept[state_stack.back()];
        if (n_pat > 0) {
            bool has_trailling_context = n_pat & kTrailContFlag;
            n_pat >>= kFlagCount;
            if (has_trailling_context) {
                do {
                    state = state_stack.back();
                    for (int i = lls_idx[state]; i < lls_idx[state + 1]; ++i) {
                        if (lls_list[i] == n_pat) {
                            ptrdiff_t n_remove = ctx.out_last - ctx.out_first;
                            state_stack.erase(state_stack.end() - n_remove, state_stack.end());
                            return n_pat;
                        }
                    }
                    *(--ctx.in_next) = *(--ctx.out_last);
                    state_stack.pop_back();
                } while (ctx.out_last != ctx.out_first);
            }
            ptrdiff_t n_remove = ctx.out_last - ctx.out_first;
            state_stack.erase(state_stack.end() - n_remove, state_stack.end());
            return n_pat;
        }
        *(--ctx.in_next) = *(--ctx.out_last);
        state_stack.pop_back();
    }
    if (ctx.in_next == ctx.in_last) { return err_end_of_input; }
    *ctx.out_last++ = *ctx.in_next++;  // Accept at least one symbol as default pattern
    return predef_pat_default;
}
